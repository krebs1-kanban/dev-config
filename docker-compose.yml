version: '3.8'

services:
  # proxy:
  #   container_name: proxy
  #   image: nginx:mainline
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - main
  #   depends_on:
  #     - frontend
  #     - backend
  frontend:
    container_name: frontend
    build:
      context: ../frontend
      dockerfile: ../dev-config/Dockerfile.frontend
    ports:
      - '3000:3000'
    environment:
      NEXT_PUBLIC_BACKEND_URL: "http://localhost:4200"
      NEXT_PUBLIC_FRONTEND_URL: "http://localhost:3000"
    volumes:
      - ../frontend:/usr/app
      - /usr/app/node_modules
    networks:
      - main
    depends_on:
      - backend
  backend:
    container_name: backend
    build:
      context: ../backend
      dockerfile: ../dev-config/Dockerfile.backend
    command: pnpm run start:dev
    ports:
      - '4200:4200'
    environment:
      PORT: 4200
      HOST: backend
      FRONTEND_URL: "http://localhost:3000"
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRES: ${JWT_ACCESS_EXPIRES}
      DATABASE_URL: postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}?schema=public
      MAILER_USERNAME: ${MAILER_USERNAME}
      MAILER_PASSWORD: ${MAILER_PASSWORD}
      MAILER_HOST: ${MAILER_HOST}
      MAILER_PORT: ${MAILER_PORT}
      MAILER_FROM: ${MAILER_FROM}
    volumes:
      - ../backend:/usr/app
      - /usr/app/node_modules
    networks:
      - main
    depends_on:
      - db
  db:
    container_name: postgres
    image: postgres:14.1-alpine
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - main

networks:
  main:
volumes:
  db:
